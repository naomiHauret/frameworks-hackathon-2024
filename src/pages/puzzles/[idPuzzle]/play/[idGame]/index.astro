---
export const prerender = false

import Layout from '@/components/Layout.astro';
import { getPuzzle } from '@/lib';
import { fdk } from '@/utils/frames'
import { clientSupabase } from '@/utils/supabase';
import { nanoid } from 'nanoid';

const { idPuzzle, idGame } = Astro.params
const puzzle = await getPuzzle(idPuzzle as string)
const userInput = Astro.url.searchParams.get('input')
let state = JSON.parse(decodeURIComponent(Astro.url.searchParams.get('state') as string)) ?? { grid: []}
const buttons = []
const basicNextActionUrl= `${Astro.url.origin}${Astro.url.pathname}`
const puzzleData = JSON.stringify(puzzle.data)

const ogImageVariableContent = encodeURIComponent(puzzleData.trim())
let searchResult
switch(userInput) {
  case 'row':
    buttons.push(
    { label: "Row 1",  action: 'post', target: `${basicNextActionUrl}?input=column&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        row: 1
      }
    }))}`},
    { label: "Row 2",  action: 'post', target: `${basicNextActionUrl}?input=column&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        row: 2
      }
    }))}`},
    { label: "Row 3",  action: 'post', target: `${basicNextActionUrl}?input=column&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        row: 3
      }
    }))}`},
    )
  break;
  case 'column':
    buttons.push(
    { label: "Column 1",  action: 'post', target: `${basicNextActionUrl}?input=search&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        ...state.cell,
        column: 1
      }
    }))}`},
    { label: "Column 2",  action: 'post', target: `${basicNextActionUrl}?input=search&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        ...state.cell,
        column: 2
      }
    }))}`},
    { label: "Column 3",  action: 'post', target: `${basicNextActionUrl}?input=search&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        ...state.cell,
        column: 3
      }
    }))}`}
    )
    
  break;

  case 'search':
  buttons.push(
    { label: 'Search',  action: 'post', target: `${basicNextActionUrl}?input=validate&state=${encodeURIComponent(JSON.stringify(state))}`},
    )

  break;
  case 'validate': 
  try {
    const body = await Astro.request.json()
    if(body.untrustedData?.inputText) {
      const find =await clientSupabase.from("pokemons").select("*").textSearch('name', `"${body?.untrustedData?.inputText}"` )
      const pokemon = find?.data?.[0]
      if(pokemon?.national_number) {
        searchResult = {
          name: pokemon?.name,
          id: pokemon?.id,
          uri: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemon?.national_number}.png` // temporary way to display images, best way would be to upload and serve all sprites from Pinata
        }
        buttons.push(
        { label: `Pick ${searchResult?.name}`,  action: 'post', target: `${Astro.url.origin}/api/puzzles/${idPuzzle}/play/${idGame}/pickPokemon?id=${pokemon.id}&national_dex=${pokemon?.national_number}&row=${state.cell.row}&column=${state.cell.column}&ogDetails=${ogImageVariableContent}`},
      { label: 'Back to search',  action: 'post', target: `${basicNextActionUrl}?input=search&state=${encodeURIComponent(JSON.stringify(state))}`},
    )
      state.searchResult = searchResult
      } else {
        buttons.push(

      { label: 'Back to search',  action: 'post', target: `${basicNextActionUrl}?input=search&state=${encodeURIComponent(JSON.stringify(state))}`},
    )
      }
    }

  } catch(e) {
    console.error(e)
    buttons.push(
      { label: 'Back to search',  action: 'post', target: `${basicNextActionUrl}?input=search&state=${encodeURIComponent(JSON.stringify(state))}`},
    )
  }

  break;
  default:
  buttons.push(
    { label: "Row 1",  action: 'post', target: `${basicNextActionUrl}?input=column&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        row: 1
      }
    }))}`},
    { label: "Row 2",  action: 'post', target: `${basicNextActionUrl}?input=column&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        row: 2
      }
    }))}`},
    { label: "Row 3",  action: 'post', target: `${basicNextActionUrl}?input=column&state=${encodeURIComponent(JSON.stringify({
      ...state,
      cell: {
        row: 3
      }
    }))}`},
    )

}


// Generate frame metadata using Pinata FDK
const metadata = {
    post_url: Astro.url.href,
    image: {
      url: `${basicNextActionUrl}/og?t=${nanoid()}&&details=${ogImageVariableContent}&state=${encodeURIComponent(JSON.stringify(state))}`
    },
    buttons: buttons,
  }
if(userInput === 'search') metadata.input = {
  text: 'pikachu'
}

const frameMetadata = fdk.getFrameMetadata(metadata);


---
<Layout title="Beat this puzzle ! Puzzlemon - Pokemon trivia puzzle" frameMetadata={frameMetadata}>
  <div
  style="height: 100%; width: 100%; font-size:75px; font-family: Inter; display: flex; justify-content: center; align-items:center;"
>
  <div style="display: flex; flex-wrap: wrap;">
    <div style="display: flex; width:100%">
      <div style="width:25%; display: flex;"></div>
      <div style="width:25%; display: flex; align-items: end; padding-bottom:4px; justify-content: center;"><span>COL 1</span></div>
      <div style="width:25%; display: flex; align-items: end; padding-bottom:4px; justify-content: center;"><span>COL 2</span></div>
      <div style="width:25%; display: flex; align-items: end; padding-bottom:4px; justify-content: center;"><span>COL 3</span></div>
    </div>
    <div style="display: flex; width:100%">
      <div style="width:25%; display: flex; justify-content: end; align-items: center;"><span style="padding-right: 4px">ROW 1</span></div>
      <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
      <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
      <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
    </div>
    <div style="display: flex; width:100%; padding-top: 4px; padding-bottom: 4px;">
    <div style="width:25%; display: flex; justify-content: end; align-items: center;"><span style="padding-right: 4px">ROW 2</span></div>
    <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
    <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
    <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
  
  </div>
  <div style="display: flex; width:100%">
  <div style="width:25%; display: flex; justify-content: end; align-items: center;"><span style="padding-right: 4px">ROW </span></div>
  <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
  <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
  <div style="padding-left: 2px; padding-right: 2px; width:25%; display: flex;"><span style="background-color: rgb(234,234,234); border-radius: 6px; width: 100%; aspect-ratio: 1 / 1"></span></div>
  
  </div>
   
  </div>
</div>
</Layout>
